# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1efHIvfexVPLS8CVIpAgFupdcYmoHquJJ
"""

import pandas as pd
import numpy as np
import difflib
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#pre-processing
movie_df = pd.read_csv("movies.csv")
movie_df.head()

movie_df.shape

"""**Content-Based Filtering**"""

content = movie_df[['genres','keywords','tagline','title','cast','director','overview']]

content.head()

for i in content.columns:
  content[i] = content[i].fillna(' ')

merged = content['genres'] + ' ' + content['keywords'] + ' ' + content['tagline'] + ' ' + content['title'] + ' ' + content['cast'] + ' ' + content['director'] + ' ' +content['overview']

#converting text to feature vector

features = TfidfVectorizer().fit_transform(merged)

print(features)

#similarity score

similar = cosine_similarity(features)

similar.shape

content_final = pd.DataFrame(similar)
content_final['title'] = content['title']
content_final.head()

movie_name = input('Enter a movie you liked')
matches = difflib.get_close_matches(movie_name,content_final['title'])

movie_match = []
for i in matches:
    movie_match.append(list(content_final['title']).index(i))

df = pd.DataFrame()
df['title'] = content_final['title']
df[movie_match] = content_final[movie_match]
df = df.sort_values(by = movie_match,ascending = False)

df = df.drop(movie_match,axis=0)
print("Your top 10 Movie Recommendations are: \n", df['title'][:10])

"""**Demographic Filtering**

"""

movie_df.columns
demograph = movie_df[['title','vote_count','vote_average']]
C = demograph['vote_average'].mean()
m = demograph['vote_count'].quantile(0.9)
movies = demograph[demograph['vote_count'] >= m]
movies['imdbscore'] = (movies['vote_average']*movies['vote_count']+C*m)/(m+movies['vote_count'])
movies = movies.sort_values(by="imdbscore",ascending = False)
movies.head()

popular = movie_df[['title','popularity']].sort_values(by = 'popularity',ascending=False)
plt.barh(popular['title'][:10],popular['popularity'][:10])
plt.gca().invert_yaxis()